package main

import (
    "fmt"
    "log"
    "os"
    "os/exec"
    "time"
)

const (
    bucketName   = "my-example-bucket"
    objectKey    = "path/to/my/object.txt"
    downloadPath = "/tmp/my_object.txt"
    dockerImageTag = "bs:next"
)

var lastModifiedTime string

func main() {
    for {
        updated, err := checkIfUpdated()
        if err != nil {
            log.Printf("Error checking update: %v", err)
        } else if updated {
            err = downloadObject()
            if err != nil {
                log.Printf("Error downloading object: %v", err)
            } else {
                err = loadDockerImage()
                if err != nil {
                    log.Printf("Error loading Docker image: %v", err)
                }
            }
        }
        time.Sleep(10 * time.Minute)
    }
}

func checkIfUpdated() (bool, error) {
    cmd := exec.Command("aws", "s3api", "head-object", "--bucket", bucketName, "--key", objectKey)
    output, err := cmd.Output()
    if err != nil {
        return false, err
    }

    newLastModifiedTime := parseLastModified(output)
    if newLastModifiedTime != lastModifiedTime {
        lastModifiedTime = newLastModifiedTime
        return true, nil
    }
    return false, nil
}

func parseLastModified(output []byte) string {
    // Simple parsing logic to extract the LastModified time from the output
    // This is a placeholder; you'll need to implement this based on the actual AWS CLI output format
    return string(output)
}

func downloadObject() error {
    cmd := exec.Command("aws", "s3", "cp", fmt.Sprintf("s3://%s/%s", bucketName, objectKey), downloadPath)
    output, err := cmd.CombinedOutput()
    if err != nil {
        log.Printf("aws s3 cp output: %s", string(output))
        return err
    }
    return nil
}

func loadDockerImage() error {
    cmd := exec.Command("docker", "load", "--input", downloadPath)
    output, err := cmd.CombinedOutput()
    if err != nil {
        log.Printf("docker load output: %s", string(output))
        return err
    }
    return tagDockerImage()
}

func tagDockerImage() error {
    cmd := exec.Command("docker", "tag", "image-id-from-load", dockerImageTag)
    output, err := cmd.CombinedOutput()
    if err != nil {
        log.Printf("docker tag output: %s", string(output))
        return err
    }
    return nil
}
